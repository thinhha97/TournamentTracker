<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAA4FQAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFz
        UkdCAK7OHOkAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAUzUlEQVR4Xu2dX8h9
        S1nHj9ZFYJCQ4cmEuuhCosgLxQQvvJBK6C8EBRYYdeGFQkKiUZHhRcQhCgq6SCgoyMhI0UhQSSjQUFBR
        6YBBSUX/ScqoKKn5/PZe9P72mb33WmuemTWz1ucD37P3+57fu/das2aeeZ6ZZ2aeEBERERERERERERER
        ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
        ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERGJ41nnV9k3
        X5r09UkvSnru+ecXJsE/JX0h6T+Tnk768/PPIjIoX5b0PUm/lvSppP9O+t8F+ouk30360aTnJYkMCZWX
        Hu8IcK802N9P+o+kXMNeqz9OeksSXsSR+PKkJ09v98keQgAqJb3d85Nwa3lgX3d+j6sLuLd/faHPJb33
        /H5kXpX0M0mvePRTfQgRfiHp7Un/wy8GB8NJ/fnaJOoMdYc6xHsMwMRfJlFX/u78+jdJH0j6RJI05luS
        3pb0Z0m5HmuJPpz0U0nExyPx4qT3J+XuqYU+m0TDGRE6jR9LwrNZGh5dinL4xSQM8NThSAWwyhT0XyXl
        HkSEeJgYg57DBnqoX0/KXf8WohG18j5KYFzkx5M+npS7jwj9Y9KvJh0tVKoKjfGtSdFx7S3xIOkherLo
        XMtTSS3LYYkYe+gxXqbcXptUs+O4FF4FnZUDqAXw4F6f9LdJuUJuITyCH0jaGhoWPW3uGnsSz+olSb3w
        7Uk1e/x7+pckPEq8D1kALiWNL1eoW+ijSVuNEXxjEtNyuevqUf+WtLXRxGD+UVLu+rYQhvE7kmQGuGul
        AzM1RMWmR2kJlYbvzV1P7yJs2wI8kC29xlvCG5Ar4PL/XFKu4HoRhomxgRYw796jIVyi3056OJVWGzyP
        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
</value>
  </data>
</root>